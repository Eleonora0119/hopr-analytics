// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalSupply(): boolean {
    let value = this.get("totalSupply");
    return value.toBoolean();
  }

  set totalSupply(value: boolean) {
    this.set("totalSupply", Value.fromBoolean(value));
  }

  get xHoprBalance(): BigDecimal {
    let value = this.get("xHoprBalance");
    return value.toBigDecimal();
  }

  set xHoprBalance(value: BigDecimal) {
    this.set("xHoprBalance", Value.fromBigDecimal(value));
  }

  get wxHoprBalance(): BigDecimal {
    let value = this.get("wxHoprBalance");
    return value.toBigDecimal();
  }

  set wxHoprBalance(value: BigDecimal) {
    this.set("wxHoprBalance", Value.fromBigDecimal(value));
  }

  get totalBalance(): BigDecimal {
    let value = this.get("totalBalance");
    return value.toBigDecimal();
  }

  set totalBalance(value: BigDecimal) {
    this.set("totalBalance", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class AccountSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AccountSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccountSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccountSnapshot", id.toString(), this);
  }

  static load(id: string): AccountSnapshot | null {
    return store.get("AccountSnapshot", id) as AccountSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get xHoprBalance(): BigDecimal {
    let value = this.get("xHoprBalance");
    return value.toBigDecimal();
  }

  set xHoprBalance(value: BigDecimal) {
    this.set("xHoprBalance", Value.fromBigDecimal(value));
  }

  get wxHoprBalance(): BigDecimal {
    let value = this.get("wxHoprBalance");
    return value.toBigDecimal();
  }

  set wxHoprBalance(value: BigDecimal) {
    this.set("wxHoprBalance", Value.fromBigDecimal(value));
  }

  get totalBalance(): BigDecimal {
    let value = this.get("totalBalance");
    return value.toBigDecimal();
  }

  set totalBalance(value: BigDecimal) {
    this.set("totalBalance", Value.fromBigDecimal(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}
